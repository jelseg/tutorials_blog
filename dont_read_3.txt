users 

here make authentication system with bcrypt (automatically imported when creating ror app):

in gemfile uncomment 
gem 'bcrypt'
and do
bundle install

later will use the devise gem instead (does the same but is less work)

--- ad user table and relations ----

create user table (with username and email) like befor
in migration file add (in create table)
t.string :password_digest
or add new migration file with
add_column :users, :password_digest, :string
and 
add_column :articles, :user_id, :int
(to make connection from article to a user)

and migrate (rails db:migrate)

in articles model add
belongs_to :user
and in user model
has_many :articles
-> can now use article.user or user.articles to retireve a user/ list of articles

-quick temp fix- remove no user errors when saving
in rails console create a default user (user = User.create(...)   user.save)
update all articles to have this user (Article.update_all(user_id: user.id))
note the users id
in articles controller, in create add
@article.user = User.find(1)
after @article = Article.new(article_params)  (assuming the id of the default user is 1)
-> will harcode all new articles to default user


----make all email adresses lower case before saving---
add
before_save { self.email = email.downcase }
in user model

----extra validation options-----
https://guides.rubyonrails.org/active_record_validations.html


--- using bcrypt ---
in user model add
has_secure_password

test in console
user.password = "123456"
check if user.password_digest is in hash from
check user.authenticate(''password'') -> the user when correct, false when incorrect


------partials with variables ----
we can replace a variable (eg @article) with a generic name (eg obj) and when rendering that partial give in the variable for that generic name
eg render ..., obj: @article


----check what is given in-----
can place 'byebug' in the action in a contoller -> app will pause there
in terminal you can do params to see what was passed on



-----remember to whitelist all params in user_param private method -----



---------------------pagination-----------------------------------------------------------------------------
use will_paginate gem
(look up what you need to add to install)
add to gem file:
gem 'will_paginate', '~> 3.3'
terminal: bundle install

replace ''obj''.all with ''obj''.paginate(page: params[:page], per_page: 30) in controller
eg articles = Article.paginate(page: params[:page], per_page: 30)

in view add:
<%= will_paginate ''variable'' %>
eg <%= will_paginate @articles %>

github page for this gem contains a link to some styling examples


--------- check if loged in ---------------------
functions to be used in multiple views should be in app/helper/application_helper
functions to be used in multiple contollers shoud be in application_controller
to make a method in application_controller useable in application_helper add:
helper_method :''methodname''
in controller

||= if left side doesn't exist it will return the right side and assigns that value to the left side -> don't have to query the database every time
!! -> turn into a boolean
