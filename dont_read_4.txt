------- test based development ------
first write tests, then for each test write the minimal code to pass this test


----automatic testing (unit tests) -----
model tests:
you have a test folder 
to run these tests do: rails test

to create a test: 
class CategoryTest < ActiveSupport::TestCase
  # test "the truth" do
  #   assert true
  # end
end

look up assertions -> used to make sure test is true

note that after every function all variables are scrapped again
and after each run the test database is emptied


def setup -> will run before each test

to use database in test comment out
parallelize(workers: :number_of_processors, with: :threads)
in test_helper.rb

--add categries --
go to model folder  -> add category.rb
add migration file with a :name field


-- automatic testing: functional testing (contoller test)

to generate tests for a contoller (for CRUD actions) you can use: (is already done if you use a scaffold generator to make everything):
rails generate test_unit:scaffold category
(where category is the name of the unit)

you can add folder path or filepath to rails test to only doe a part of the tests
rails test test/controllers
otherwise it will do all tests (except for system)

note you might have to add
    gem 'rexml', require: false
to the gem file (and bundle install) 


--- integration test: test bussiness process ---

cretae integration test:
rails generate integration_test create_category
(with create_category the name of the test)


